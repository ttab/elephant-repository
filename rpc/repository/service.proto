syntax = "proto3";

package elephant.repository;

option go_package = "./rpc/repository";

service Documents {
  // Get retrieves a document version.
  rpc Get(GetDocumentRequest) returns (GetDocumentResponse);
  // GetHistory lists the document version history.
  rpc GetHistory(GetHistoryRequest) returns (GetHistoryResponse);
  // Update is used to create new document versions, set statuses, update ACLs.
  rpc Update(UpdateRequest) returns (UpdateResponse);
  // Validate is used to validate a document without writing it to the
  // repository.
  rpc Validate(ValidateRequest) returns (ValidateResponse);
  // Delete deletes a document and all its associated data.
  rpc Delete(DeleteDocumentRequest) returns (DeleteDocumentResponse);
  // GetMeta returns metadata for a document, including the ACL and current
  // status heads.
  rpc GetMeta(GetMetaRequest) returns (GetMetaResponse);
  // Eventlog returns document update events, optionally waiting for new events.
  rpc Eventlog(GetEventlogRequest) returns (GetEventlogResponse);
  // GetStatusHistory returns the history of a status for a document.
  rpc GetStatusHistory(GetStatusHistoryRequest) returns (GetStatusHistoryReponse);
}

service Schemas {
  // Register register a new validation schema version.
  rpc Register(RegisterSchemaRequest) returns (RegisterSchemaResponse);
  // SetActive activates schema versions.
  rpc SetActive(SetActiveSchemaRequest) returns (SetActiveSchemaResponse);
  // Get retrieves a schema.
  rpc Get(GetSchemaRequest) returns (GetSchemaResponse);
  // GetAllActiveSchemas returns the currently active schemas.
  rpc GetAllActive(GetAllActiveSchemasRequest) returns (GetAllActiveSchemasResponse);
}

service Workflows {
  // UpdateStatus creates or updates a status that can be used for documents.
  rpc UpdateStatus(UpdateStatusRequest) returns (UpdateStatusResponse);
  // GetStatuses lists all enabled statuses.
  rpc GetStatuses(GetStatusesRequest) returns (GetStatusesResponse);
  // CreateStatusRule creates or updates a status rule that should be applied
  // when setting statuses.
  rpc CreateStatusRule(CreateStatusRuleRequest) returns (CreateStatusRuleResponse);
  // DeleteStatusRule removes a status rule.
  rpc DeleteStatusRule(DeleteStatusRuleRequest) returns (DeleteStatusRuleResponse);
  // GetStatusRules returns all status rules.
  rpc GetStatusRules(GetStatusRulesRequest) returns (GetStatusRulesResponse);
}

service Reports {
  // Update or create a report.
  rpc Update(UpdateReportRequest) returns (UpdateReportResponse);
  // Get a report.
  rpc Get(GetReportRequest) returns (GetReportResponse);
  // Run a report. This will run the report and return the results instead of
  // sending it to any outputs.
  rpc Run(RunReportRequest) returns (RunReportResponse);
  // Test a report by runing it without saving.
  rpc Test(TestReportRequest) returns (TestReportResponse);
}

message GetStatusHistoryRequest {
  // UUID of the document to get the status history for.
  string uuid = 1;
  // Name of the status to get.
  string name = 2;
  // Before is a status ID used to page backwards through the status history. If
  // no ID or a zero ID is provided the list will start with the lastest status.
  int64 before = 3;
}

message GetStatusHistoryReponse {
  repeated Status statuses = 1;
}

message GetEventlogRequest {
  // After specifies the event ID after which to start returning events.
  int64 after = 1;
  // Wait is the maximum time to wait for new events. Defaults to 2000.
  int32 waitMs = 2;
  // BatchSize is the number of events we want in the response. Defaults to 10.
  int32 batchSize = 3;
  // BatchWaitMs is the maximum time we wait for a batch to be filled. Defaults to 200.
  int32 batchWaitMs = 4;
}

message GetEventlogResponse {
  repeated EventlogItem items = 1;
}

message EventlogItem {
  int64 id = 1;
  string event = 2;
  string uuid = 3;
  string timestamp = 4;
  int64 version = 5;
  string status = 6;
  int64 status_id = 7;
  repeated ACLEntry acl = 8;
  string updater_uri = 9;
}

message RunReportRequest {
  string name = 1;
}

message RunReportResponse {
  repeated string tables = 1;
  bytes spreadsheet = 2;
}

message TestReportRequest {
  Report report = 1;
}

message TestReportResponse {
  repeated string tables = 1;
  bytes spreadsheet = 2;
}

message GetReportRequest {
  string name = 1;
}

message GetReportResponse {
  Report report = 1;
  bool enabled = 2;
  string next_execution = 3;
}

message UpdateReportRequest {
  Report report = 1;
  bool enabled = 2;
}

message Report {
  string name = 1;
  string title = 2;
  bool generate_sheet = 3;
  string cron_expression = 4;
  string cron_timezone = 7; // (default UTC)
  repeated string slack_channels = 5;
  repeated ReportQuery queries = 6;
}

message ReportQuery {
  string name = 1;
  repeated int32 summarise = 2;
  string sql = 3;
  repeated ReportValue value_processing = 4;
}

message ReportValue {
  string column = 1;
  repeated string processors = 2;
}

message UpdateReportResponse {
  string next_execution = 1;
}

message GetStatusRulesRequest {}

message GetStatusRulesResponse {
  repeated StatusRule rules = 1;
}

message GetStatusesRequest {}

message WorkflowStatus {
  string name = 1;
}

message GetStatusesResponse {
  repeated WorkflowStatus statuses = 1;
}

message UpdateStatusRequest {
  // Name of the status.
  string name = 1;
  // Disabled disables the status so that it cannot be used when setting new
  // statuses.
  bool disabled = 2;
}

message UpdateStatusResponse {}

message CreateStatusRuleRequest {
  StatusRule rule = 1;
}

message StatusRule {
  string name = 1;
  string description = 2;
  bool access_rule = 3;
  repeated string applies_to = 4;
  repeated string for_types = 5;
  string expression = 6;
}

message CreateStatusRuleResponse {}

message DeleteStatusRuleRequest {
  string name = 1;
}

message DeleteStatusRuleResponse {}

message GetDocumentRequest {
  // UUID of the document to get.
  string uuid = 1;
  // Version to get, omit to get latest (or use status).
  int64 version = 2;
  // Status is used to fetch the version of the document references by the last
  // status update. Can be used instead of specifying a version.
  string status = 3;
  // Lock will lock the document for updates. This only affects the creation of
  // new versions of the document, statuses can still be updated.
  bool lock = 4;
}

message GetDocumentResponse {
  Document document = 1;
  int64 version = 2;
}

message GetHistoryRequest {
  // UUID of the document to get the history for.
  string uuid = 1;
  // Before is which version number we should start fetching history from, omit
  // to start with the latest version.
  int64 before = 2;
}

message GetHistoryResponse {
  repeated DocumentVersion versions = 1;
}

message DocumentVersion {
  // Version of the document.
  int64 version = 1;
  // Created timestamp is the RFC3339 timestamp for when the version was
  // created.
  string created = 2;
  // Creator of the version.
  string creator = 3;
  // Meta data to for the document version.
  map<string, string> meta = 4;
}

// UpdateRequest creates a new document version and/or sets statuses and ACLs
// for a document. The update is transactional will fail or succed as a whole.
//
// If the document fails validation an "invalid_argument" error will be returned
// with the number of errors as meta "err_count" and the individual errors as
// "0", "1", "2"... Use the Validate method to get th errors as structured data.
message UpdateRequest {
  // UUID of the document to update.
  string uuid = 1;
  // Document version to create.
  Document document = 2;
  // Meta data to associate with the document version.
  map<string, string> meta = 3;
  // IfMatch is used for optimistic locks. Set to the version that you require
  // to be the current one for the update to be performed, or -1 to only perform
  // the update if the document doesn't already exist.
  int64 if_match = 4;
  // Status updates to perform.
  repeated StatusUpdate status  = 5;
  // ACL is an ACL list controlling access to the document.
  repeated ACLEntry acl = 6;
  // ImportDirective can be used to preserve timestamps and authorship
  // information from originating systems, but requires the "import_directive"
  // scope for use.
  ImportDirective import_directive = 7;
}

// ImportDirective can be used to preserve timestamps and authorship information
// from originating systems.
message ImportDirective {
  string originallyCreated = 1;
  string originalCreator = 2;
}

// UpdateResponse describes the result of an update request.
message UpdateResponse {
  int64 version = 1;
}

message ValidateRequest {
  Document document = 1;
}

message ValidateResponse {
  repeated ValidationResult errors = 1;
}

message ValidationResult {
  repeated EntityRef entity = 1;
  string error = 2;
}

message EntityRef {
  // RefType is type of entity that's referenced, one of "block", "property",
  // "attribute", "data attribute", or "parameter."
  string ref_type = 1;
  // Kind is the block type, one of "link", "meta", or "content".
  string kind = 2;
  // Index is the position of the entity in an array, where applicable.
  int64 index = 3;
  // Name is the name of the entity, where applicable.
  string name = 4;
  // Type is the type of the entity, where applicable.
  string type = 5;
  // Rel is the relationship for the entity, where applicable.
  string rel = 6;
}

message StatusUpdate {
  // Name of the status to set.
  string name = 1;
  // Version to set the status for. Set to -1 to signal that the status no
  // longer is valid for the document. Optional if part of a document update
  // request as it then will default to the version being written.
  int64 version = 2;
  // Meta data to include with the status update.
  map<string, string> meta = 3;
  // IfMatch is used for optimistic locks. Set to the status id that you require
  // to be the current one for the status to be set, or -1 to only perform the
  // update if the status hasn't previously been set.
  int64 if_match = 4;
}

message UpdatePermissionsRequest {
  // UUID of the document to update permissions for.
  string uuid = 1;
  // Set (upsert based on URI) this list of ACL entries. 
  repeated ACLEntry list = 2;
}

message UpdatePermissionsResponse {}

message DeleteDocumentRequest {
  // UUID of the document to delete.
  string uuid = 1;
  // Meta data to include with the delete record.
  map<string, string> meta = 2;
  // IfMatch is used for optimistic locks. Set to the version that you require
  // to be the current one for the delete to be performed.
  int64 if_match = 3;
}

message DeleteDocumentResponse {}

message GetMetaRequest {
  // UUID of the document to get metadata for
  string uuid = 1;
}

message GetMetaResponse {
  DocumentMeta meta = 1;  
}

message DocumentMeta {
  // Created timestamp is the RFC3339 timestamp for when the document was
  // created.
  string created = 1;
  // Modified timestamp is the RFC3339 timestamp for the last change that
  // affected the document.
  string modified = 2;
  // CurrentVersion is the last written vrsion of the document.
  int64 currentVersion = 3;
  // Heads are the last statuses.
  map<string, Status> heads = 4;
  // ACL is an ACL list controlling access to the document.
  repeated ACLEntry acl = 5;
}

message Status {
  // ID of the status.
  int64 id = 1;
  // Version of the document that the status refers to.
  int64 version = 2;
  // Creator of the status.
  string creator = 3;
  // Created timestamp is the RFC3339 timestamp for when the statue was created.
  string created = 4;
  // Meta data for the status.
  map<string, string> meta = 5;
}

message ACLEntry {
  // URI that identifies the party that's granted access.
  string uri = 1;
  // Permissions given to the grantee.
  repeated string permissions = 2;
}

// Document is the content
message Document {
  // UUID is a unique ID for the document, this can be a random v4
  // UUID, or a URI-derived v5 UUID.
  string uuid = 1;
  // Type is the content type of the document.
  string type = 2;
  // URI identifies the document (in a more human-readable way than
  // the UUID)
  string uri = 3;
  // URL is the browseable location of the document (if any)
  string url = 4;
  // Title is the title of the document, often used as the headline
  // when the document is displayed.
  string title = 5;
  // Content is the content of the documen, this is essentially what
  // gets rendered on the page when you view a document.
  repeated Block content = 6;
  // Meta is the metadata for a document, this could be stuff like
  // open graph tags and content profile information.
  repeated Block meta = 7;
  // Links are links to other resources and entities. This could be
  // links to categories and subject for the document, or authors.
  repeated Block links = 8;
  // Language is the language used in the document as an IETF language
  // tag. F.ex. "en", "en-UK", "es", or "sv-SE".
  string language = 9;
}

// Block is the building block for data embedded in documents. It is
// used for both content, links and metadata. Blocks have can be
// nested, but that's nothing to strive for, keep it simple.
message Block {
  // ID is the block ID
  string id = 1;
  // UUID is used to reference another Document in a block.
  string uuid = 2;
  // URI is used to reference another entity in a document.
  string uri = 3;
  // URL is a browseable URL for the the block.
  string url = 4;
  // Type is the type of the block
  string type = 5;
  // Title is the title/headline of the block, typically used in the
  // presentation of the block.
  string title = 6;
  // Data contains block data
  map<string, string> data = 7;
  // Relationship describes the relationship to the document/parent
  // entity
  string rel = 8;
  // Role is used for nuancing and qualifying relationships.
  string role = 9;
  // Name is a name for the block. An alternative to "rel" when
  // relationship is a term that doesn't fit.
  string name = 10;
  // Value is a value for the block. Useful when we want to store a
  // primitive value.
  string value = 11;
  // ContentType is used to describe the content type of the
  // block/linked entity if it differs from the type of the block.
  string contentType = 12;
  // Links are used to link to other resources and documents.
  repeated Block links = 13;
  // Content is used to embed content blocks.
  repeated Block content = 14;
  // Meta is used to embed metadata
  repeated Block meta = 15;
}

message RegisterSchemaRequest {
  Schema schema = 1;
  // Activate the registered schema immediately.
  bool activate = 2;
}

message RegisterSchemaResponse {}

message SetActiveSchemaRequest {
  // Name is the name of the schema to activate or deactivate, required.
  string name = 1;
  // Version of the schema to activate, required when activating a new version.
  string version = 2;
  // Deactivate is used to disable a schema, activate new schema versions
  // instead if you want to start using a new version.
  bool deactivate = 3;
}

message SetActiveSchemaResponse {}

message GetSchemaRequest {
  // Name of the schema to get.
  string name = 1;
  // Version of the schema to get, optional. The currently active version of the
  // schema will be returned if no version is specified.
  string version = 2;
}

message GetSchemaResponse {
  string version = 1;
  bytes spec = 2;
}

message GetAllActiveSchemasRequest {}

message GetAllActiveSchemasResponse {
  repeated Schema schemas = 1;
}

message Schema {
  string name = 1;
  string version = 2;
  string spec = 3;
}
